name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop, feat/deploy-to-vercel ]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run unit tests
      run: npm run test:unit

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run linting
      run: npm run lint
      continue-on-error: true  # Don't fail CI for linting issues, just warn

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build project
      run: npm run build

  deployment-test:
    name: Test Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python for deployment tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Wait for Vercel deployment
      run: |
        echo "Waiting for Vercel deployment to be ready..."
        sleep 60
        echo "Proceeding with deployment tests"

    - name: Get Vercel preview URL
      id: getPreviewUrl
      run: |
        # Generate preview URL based on branch name
        BRANCH_NAME="${{ github.head_ref }}"
        CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
        PREVIEW_URL="https://permissions-demo-git-${CLEAN_BRANCH}-erinversfeldcodes-projects.vercel.app"
        echo "Generated preview URL: $PREVIEW_URL"
        echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

    - name: Run deployment tests against preview URL
      run: |
        echo "Preview URL: ${{ steps.getPreviewUrl.outputs.preview_url }}"
        python scripts/automated-deployment-testing.py --url=${{ steps.getPreviewUrl.outputs.preview_url }}
        if [ $? -ne 0 ]; then
          echo "Deployment tests failed - blocking PR"
          exit 1
        fi
      env:
        VERCEL_PROTECTION_BYPASS: ${{ secrets.VERCEL_PROTECTION_BYPASS }}

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let testResults = 'Deployment tests completed';

          try {
            if (fs.existsSync('scripts/deployment-test-results.json')) {
              const results = JSON.parse(fs.readFileSync('scripts/deployment-test-results.json', 'utf8'));
              testResults = `üöÄ **Preview Deployment Tests**

              **Preview URL**: ${{ steps.getPreviewUrl.outputs.preview_url }}

              **Results**: ${results.summary || 'Tests completed'}
              `;
            }
          } catch (error) {
            testResults = `‚ùå **Preview Deployment Tests Failed**

            **Preview URL**: ${{ steps.getPreviewUrl.outputs.preview_url }}
            **Error**: ${error.message}
            `;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testResults
          })